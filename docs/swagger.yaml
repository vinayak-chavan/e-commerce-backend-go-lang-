basePath: /
definitions:
  dto.AddToCartRequest:
    properties:
      productId:
        type: integer
      quantity:
        type: integer
    required:
    - productId
    - quantity
    type: object
  dto.CartItemResponse:
    properties:
      id:
        type: integer
      product:
        $ref: '#/definitions/dto.ProductDetail'
      productId:
        type: integer
      quantity:
        type: integer
    type: object
  dto.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  dto.InventoryResponseDTO:
    properties:
      id:
        type: integer
      name:
        type: string
      price:
        type: number
      quantity:
        type: integer
    type: object
  dto.OrderResponseDTO:
    properties:
      bill:
        type: number
      currentDate:
        type: string
      id:
        type: integer
      inventory:
        items:
          $ref: '#/definitions/dto.InventoryResponseDTO'
        type: array
    type: object
  dto.ProductDetail:
    properties:
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      photo:
        type: string
      price:
        type: number
    type: object
  dto.ProductResponse:
    properties:
      created_at:
        type: string
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      photo:
        type: string
      price:
        type: number
      updated_at:
        type: string
    type: object
  dto.SuccessResponse:
    properties:
      message:
        type: string
    type: object
  dto.UpdateQuantity:
    properties:
      quantity:
        type: integer
    type: object
  dto.UserLoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  dto.UserLoginResponse:
    properties:
      token:
        type: string
      user:
        $ref: '#/definitions/dto.UserRegisterResponse'
    type: object
  dto.UserRegisterRequest:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        type: string
      role:
        type: string
    required:
    - email
    - name
    - password
    - role
    type: object
  dto.UserRegisterResponse:
    properties:
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      role:
        type: string
    type: object
host: localhost:8000
info:
  contact: {}
  description: Testing Swagger APIs.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: E-Commerce
  version: "1.0"
paths:
  /cart:
    get:
      description: Retrieve all items in the user's cart
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.CartItemResponse'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - JWT: []
      summary: View cart items
      tags:
      - cart
    post:
      consumes:
      - application/json
      description: Add a specific product to the user's cart
      parameters:
      - description: Add to Cart Request
        in: body
        name: AddToCartRequest
        required: true
        schema:
          $ref: '#/definitions/dto.AddToCartRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.CartItemResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - JWT: []
      summary: Add a product to the cart
      tags:
      - cart
  /cart/{id}:
    delete:
      description: Remove a specific item from the user's cart by cart item ID
      parameters:
      - description: Cart Item ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - JWT: []
      summary: Remove an item from the cart
      tags:
      - cart
    put:
      consumes:
      - application/json
      description: Update the quantity of a specific item in the user's cart by cart
        item ID
      parameters:
      - description: Cart Item ID
        in: path
        name: id
        required: true
        type: integer
      - description: Change quantity
        in: body
        name: UpdateQuantity
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateQuantity'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.CartItemResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - JWT: []
      summary: Update cart item quantity
      tags:
      - cart
  /orders:
    get:
      consumes:
      - application/json
      description: Retrieve the current user's orders
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.OrderResponseDTO'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - JWT: []
      summary: Get my orders
      tags:
      - orders
    post:
      consumes:
      - application/json
      description: Create an order from the user's cart
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.OrderResponseDTO'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - JWT: []
      summary: Add order from cart
      tags:
      - orders
  /orders/all:
    get:
      consumes:
      - application/json
      description: Retrieve all orders (admin only)
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.OrderResponseDTO'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - JWT: []
      summary: Get all orders
      tags:
      - orders
  /products:
    get:
      description: Retrieve a list of all products
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.ProductResponse'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - JWT: []
      summary: Get all products
      tags:
      - products
    post:
      consumes:
      - multipart/form-data
      description: Create a new product with the given details
      parameters:
      - description: Product Name
        in: formData
        name: name
        required: true
        type: string
      - description: Product Description
        in: formData
        name: description
        required: true
        type: string
      - description: Product Price
        in: formData
        name: price
        required: true
        type: number
      - description: Product Photo
        in: formData
        name: photo
        required: true
        type: file
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.ProductResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - JWT: []
      summary: Create a new product
      tags:
      - products
  /products/{id}:
    delete:
      description: Delete a product by its ID
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.SuccessResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - JWT: []
      summary: Delete a product
      tags:
      - products
    get:
      description: Retrieve details of a product by its ID
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ProductResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - JWT: []
      summary: Get a product by ID
      tags:
      - products
    put:
      consumes:
      - multipart/form-data
      description: Update an existing product with the given details
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      - description: Product Name
        in: formData
        name: name
        type: string
      - description: Product Description
        in: formData
        name: description
        type: string
      - description: Product Price
        in: formData
        name: price
        type: number
      - description: Product Photo
        in: formData
        name: photo
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ProductResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - JWT: []
      summary: Update an existing product
      tags:
      - products
  /users/login:
    post:
      consumes:
      - application/json
      description: Authenticate a user and return a JWT token
      parameters:
      - description: User credentials
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.UserLoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UserLoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Login a user
      tags:
      - users
  /users/register:
    post:
      consumes:
      - application/json
      description: Create a new user with the given details
      parameters:
      - description: User information
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.UserRegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.UserRegisterResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Register a new user
      tags:
      - users
schemes:
- http
securityDefinitions:
  JWT:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
